{
 "metadata": {
  "name": "",
  "signature": "sha256:f6ca93f81323e8aca38f2c7d4a4b80ce3c7ecacb5712fcec638be6e215fcf8ab"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from IPython.display import HTML"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "#Free-Body Diagram Example: Box on incline"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%%HTML\n",
      "<!DOCTYPE html>\n",
      "<html>\n",
      "    <head>\n",
      "        <style> \n",
      "            body {\n",
      "                margin: 10px;\n",
      "            }\n",
      "            #jxgbox1 {  \n",
      "                border:1px solid black; background-size: contain; background-repeat: no-repeat;\n",
      "                background-position: center; background-size: 80% auto;\n",
      "            }\n",
      "            \n",
      "        </style>\n",
      "\n",
      "    </head>\n",
      "\n",
      "\n",
      "    <body>       \n",
      "        <!-- Jxg Box -->\n",
      "        <div id='jxgbox1' class='jxgbox' style='width:450px; height:350px; float:left; border: solid #1f628d 2px;'></div>        \n",
      "        \n",
      "        <!-- Menu -->\n",
      "        <div id=\"menu\" style=\"width: 170px; float: left;\">\n",
      "              <ul>\n",
      "                  Add Forces\n",
      "                  <input class=\"btn\" type=\"button\" value=\"Normal\" onClick=\"var vN = addNormal()\">\n",
      "                  <input class=\"btn\" type=\"button\" value=\"Gravitational\" onClick=\"addGravitational()\">\n",
      "                  <input class=\"btn\" type=\"button\" value=\"Friction\" onClick=\"addFriction()\">\n",
      "                  <br></br>\n",
      "\n",
      "                  <input class=\"btn\" type=\"button\" value=\"Clear\" onClick=\"clearAll()\">\n",
      "              </ul>\n",
      "          </div>\n",
      "\n",
      "        <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/jsxgraph/0.98/jsxgraphcore.js\"></script>\n",
      "        <script type='text/javascript'>\n",
      "            \n",
      "            board = initBoard();\n",
      "\n",
      "            function initBoard() {\n",
      "                bboxlimits = [-10, 10, 10, -10];\n",
      "                var board = JXG.JSXGraph.initBoard('jxgbox1', {boundingbox: bboxlimits, axis:false, showCopyright: false});\n",
      "                state = {};\n",
      "\n",
      "                N = undefined;\n",
      "                vg = undefined;\n",
      "                vf = undefined;\n",
      "\n",
      "                var im = board.create('image',[\"https://studio.edge.edx.org/c4x/DavidsonNext/Ann101/asset/box_on_incline.png\", \n",
      "                                      [bboxlimits[0]+0.8,bboxlimits[3]], [(bboxlimits[1]-bboxlimits[0]),1.0*(bboxlimits[3]-bboxlimits[2])] ],\n",
      "                                      {fixed:true});\n",
      "            \n",
      "                cm = board.create('point',[0,1.5],{size:1,fixed:true,name:'cm',withLabel:false,strokeColor:'pink',fillColor:'pink'})\n",
      "\n",
      "                return board;\n",
      "            }\n",
      "\n",
      "            // Create a vector providing two points.\n",
      "            addNormal = function() {\n",
      "                vN = createVector('N',[3,1],[5,5]); \n",
      "                // console.log(vN); \n",
      "                // console.log(board.elementsByName.N.point1.X(),board.elementsByName.N.point1.Y())\n",
      "            }\n",
      "\n",
      "            addFriction = function() {\n",
      "                vf = createVector('f',[5,1],[7,5]);  \n",
      "            }\n",
      "\n",
      "            addGravitational = function() {\n",
      "                vg = createVector('g',[4,1],[6,5]);\n",
      "                // console.log(vg)\n",
      "            }\n",
      "\n",
      "            // Create a vector providing two points.\n",
      "            createVector = function(vName,v1,v2) {\n",
      "                if (!board.elementsByName[vName]) {\n",
      "                    var tail = board.create('point', v1,{size:1,withLabel:false});\n",
      "                    var tip = board.create('point', v2,{size:2,name:vName});\n",
      "                    var l1 = board.create('arrow', [tail, tip],{name:vName}); \n",
      "                    return l1;\n",
      "                }\n",
      "            }\n",
      "\n",
      "            clearAll = function() {\n",
      "                board = initBoard();\n",
      "            }\n",
      "\n",
      "            grabVectorProp = function(vObject) {\n",
      "                if (vObject) {\n",
      "                    var x1 = board.elementsByName[vObject.name].point1.X();\n",
      "                    var y1 = board.elementsByName[vObject.name].point1.Y();\n",
      "                    var x2 = board.elementsByName[vObject.name].point2.X();\n",
      "                    var y2 = board.elementsByName[vObject.name].point2.Y();\n",
      "                    var angle = board.elementsByName[vObject.name].getAngle();\n",
      "                    angle = 180.0*angle/Math.PI;\n",
      "                    if (angle < 0) {\n",
      "                        angle = 360.0 + angle;\n",
      "                    }\n",
      "                    var length = board.elementsByName[vObject.name].L();\n",
      "\n",
      "                    return {'name':vObject.name,'tail':[x1,y1],'tip':[x2,y2],'length':length,'angle':angle}\n",
      "                }\n",
      "                else {\n",
      "                    return undefined;\n",
      "                }\n",
      "            }\n",
      "\n",
      "            fetchState = function() {\n",
      "                input = {};\n",
      "                input['cm'] = {'p1':[cm.X(),cm.Y()]};\n",
      "                input['N'] = grabVectorProp(vN);\n",
      "                input['g'] = grabVectorProp(vg);\n",
      "                input['f'] = grabVectorProp(vf);\n",
      "                console.log(input);\n",
      "                \n",
      "                return input;\n",
      "            }\n",
      "\n",
      "            getInput = function(){\n",
      "                return JSON.stringify(fetchState());\n",
      "            }\n",
      "\n",
      "            getState = function(){\n",
      "                //state = {input: JSON.parse(getinput()), y:xfield.position};\n",
      "                state = {input: JSON.parse(getInput())}\n",
      "                statestr = JSON.stringify(state);\n",
      "                // $('#msg').html('getstate ' + statestr);\n",
      "                return statestr\n",
      "            }\n",
      "\n",
      "            setState = function(statestr){\n",
      "                state = JSON.parse(statestr);\n",
      "                console.log(state); \n",
      "                input = state.input\n",
      "                //addNormal();\n",
      "                if (input['N']) {\n",
      "                    vN = createVector('N',input['N']['tail'],input['N']['tip']);\n",
      "                }\n",
      "                if (input['g']) {\n",
      "                    vg = createVector('g',input['g']['tail'],input['g']['tip']);\n",
      "                }\n",
      "                if (input['f']) {\n",
      "                    vf = createVector('f',input['f']['tail'],input['f']['tip']);\n",
      "                }\n",
      "                board.update()\n",
      "                \n",
      "                //alert(statestr);\n",
      "                console.debug('State updated successfully from saved.');\n",
      "            }\n",
      "\n",
      "        </script>\n",
      "    </body>\n",
      "</html>\n",
      "\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Writing fdb_box_on_incline.html\n"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def vglcfn(e, ans):\n",
      "  '''\n",
      "  Grading a force diagram.\n",
      "  '''\n",
      "  class Vector(object):\n",
      "      def __init__(self,name,length,angle,tail):\n",
      "          self.name = name\n",
      "          self.length = length\n",
      "          self.angle = angle\n",
      "          self.tail = tail\n",
      "          return None\n",
      "\n",
      "  class gradeVector:\n",
      "      def __init__(self):\n",
      "          return None\n",
      "\n",
      "      def compareLengths(self,v1,v2):\n",
      "          if abs(v1.length-v2.length) < 1.00:\n",
      "              return True\n",
      "          else:\n",
      "              return False\n",
      "\n",
      "      def checkAngle(self,v1,GIVEN,**kwargs):\n",
      "          tol = kwargs.get('tol', 1.0)\n",
      "          if abs(v1.angle - GIVEN) < tol:\n",
      "              return True\n",
      "          else:\n",
      "              return False\n",
      "      \n",
      "      def checkCenterMass(self, cm, vectors, **kwargs):\n",
      "          tol = kwargs.get('tol', 0.25)\n",
      "          numFalse = []\n",
      "          for v in vectors:\n",
      "              dist = math.hypot(cm[0] - v.tail[0], cm[1] - v.tail[1])\n",
      "              if dist > tol:\n",
      "                  numFalse.append([v.name,dist])\n",
      "        \n",
      "          if len(numFalse) == 0:\n",
      "              return True\n",
      "          else:\n",
      "              return False\n",
      "\n",
      "### Old Grader for car traveling to the right.\n",
      "#   answer = json.loads(json.loads(ans)['answer'])\n",
      "#   cm = answer['cm']['p1']\n",
      "#   if 'N' in answer and 'g' in answer and 'f' in answer:\n",
      "#       vN = Vector(answer['N']['name'],answer['N']['length'],answer['N']['angle'],answer['N']['tail'])\n",
      "#       vg = Vector(answer['g']['name'],answer['g']['length'],answer['g']['angle'],answer['g']['tail'])\n",
      "#       vf = Vector(answer['f']['name'],answer['f']['length'],answer['f']['angle'],answer['f']['tail'])\n",
      "#   else:  \n",
      "#       return {'ok': False, 'msg': 'You need to use all three vectors.'}\n",
      "\n",
      "#   if gradeVector().compareLengths(vN, vg) == False:\n",
      "#       return {'ok': False, 'msg': 'Normal Force and Gravitational Force should be similar lengths.'}\n",
      "\n",
      "#   if gradeVector().checkAngle(vN, 90.0, tol=2.0) == False:\n",
      "#       return {'ok': False, 'msg': 'The angle of the Normal Force is incorrect. Your angle: %.1f' % vN.angle}\n",
      "\n",
      "#   if gradeVector().checkAngle(vg, 270.0, tol=2.0) == False:\n",
      "#       return {'ok': False, 'msg': 'The angle of the Gravitational Force is incorrect. Your angle: %.1f' % vg.angle}\n",
      "\n",
      "#   if gradeVector().checkAngle(vf, 180.0, tol=2.0) == False:\n",
      "#       return {'ok': False, 'msg': 'The angle of the Frictional Force is incorrect. Your angle: %.1f' % vf.angle}\n",
      "\n",
      "#   if gradeVector().checkCenterMass(cm,[vN,vg],tol=0.25) == False:\n",
      "#       return {'ok': False, 'msg': 'One or more of your vectors do not start from the center of mass.'}\n",
      "\n",
      "#   return {'ok': True, 'msg': 'Good job!'}"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    }
   ],
   "metadata": {}
  }
 ]
}